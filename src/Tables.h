#ifndef CHESSENGINE_TABLES_H
#define CHESSENGINE_TABLES_H

#include <cstdint>
#include "Utils.h"

namespace Engine {
    namespace Tables {

        const uint64_t ClearRank[] = {0xFFFFFFFFFFFFFF00,
                                      0xFFFFFFFFFFFF00FF,
                                      0xFFFFFFFFFF00FFFF,
                                      0xFFFFFFFF00FFFFFF,
                                      0xFFFFFF00FFFFFFFF,
                                      0xFFFF00FFFFFFFFFF,
                                      0xFF00FFFFFFFFFFFF,
                                      0x00FFFFFFFFFFFFFF
        };
        const uint64_t ClearFile[] = {
                0x7F7F7F7F7F7F7F7F,
                0xBFBFBFBFBFBFBFBF,
                0xDFDFDFDFDFDFDFDF,
                0xEFEFEFEFEFEFEFEF,
                0xF7F7F7F7F7F7F7F7,
                0xFBFBFBFBFBFBFBFB,
                0xFDFDFDFDFDFDFDFD,
                0xFEFEFEFEFEFEFEFE,
        };
        const uint64_t MaskRank[] = {0xFF,
                                     0xFF00,
                                     0xFF0000,
                                     0xFF000000,
                                     0xFF00000000,
                                     0xFF0000000000,
                                     0xFF000000000000,
                                     0xFF00000000000000
        };

        const uint64_t MaskFile[] = {0x8080808080808080,
                                     0x4040404040404040,
                                     0x2020202020202020,
                                     0x1010101010101010,
                                     0x808080808080808,
                                     0x404040404040404,
                                     0x202020202020202,
                                     0x0101010101010101,
        };
        const int Bonus[6][64]{

            //PAWN
                {0,  0,  0,  0,  0,  0,  0,  0,
                        50, 50, 50, 50, 50, 50, 50, 50,
                        10, 10, 20, 30, 30, 20, 10, 10,
                        5,  5, 10, 25, 25, 10,  5,  5,
                        0,  0,  0, 20, 20,  0,  0,  0,
                        5, -5,-10,  0,  0,-10, -5,  5,
                        5, 10, 10,-20,-20, 10, 10,  5,
                        0,  0,  0,  0,  0,  0,  0,  0},

            //KNIGHT
                {-50,-40,-30,-30,-30,-30,-40,-50,
                        -40,-20,  0,  0,  0,  0,-20,-40,
                        -30,  0, 10, 15, 15, 10,  0,-30,
                        -30,  5, 15, 20, 20, 15,  5,-30,
                        -30,  0, 15, 20, 20, 15,  0,-30,
                        -30,  5, 10, 15, 15, 10,  5,-30,
                        -40,-20,  0,  5,  5,  0,-20,-40,
                        -50,-40,-30,-30,-30,-30,-40,-50,},

                 //BISHOP
                {-20,-10,-10,-10,-10,-10,-10,-20,
                        -10,  0,  0,  0,  0,  0,  0,-10,
                        -10,  0,  5, 10, 10,  5,  0,-10,
                        -10,  5,  5, 10, 10,  5,  5,-10,
                        -10,  0, 10, 10, 10, 10,  0,-10,
                        -10, 10, 10, 10, 10, 10, 10,-10,
                        -10,  5,  0,  0,  0,  0,  5,-10,
                        -20,-10,-10,-10,-10,-10,-10,-20,},

                 //ROOK
                {0,  0,  0,  0,  0,  0,  0,  0,
                        5, 10, 10, 10, 10, 10, 10,  5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        -5,  0,  0,  0,  0,  0,  0, -5,
                        0,  0,  0,  5,  5,  0,  0,  0},

                 //QUEEN
                {-20,-10,-10, -5, -5,-10,-10,-20,
                        -10,  0,  0,  0,  0,  0,  0,-10,
                        -10,  0,  5,  5,  5,  5,  0,-10,
                        -5,  0,  5,  5,  5,  5,  0, -5,
                        0,  0,  5,  5,  5,  5,  0, -5,
                        -10,  5,  5,  5,  5,  5,  0,-10,
                        -10,  0,  5,  0,  0,  0,  0,-10,
                        -20,-10,-10, -5, -5,-10,-10,-20},


                 //KING
                {-30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -20,-30,-30,-40,-40,-30,-30,-20,
                        -10,-20,-20,-20,-20,-20,-20,-10,
                        20, 20,  0,  0,  0,  0, 20, 20,
                        20, 30, 10,  0,  0, 10, 30, 20
                }

        };

        const int KingBonus[2][64]{

                //KING OPENING
                {-30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -30,-40,-40,-50,-50,-40,-40,-30,
                        -20,-30,-30,-40,-40,-30,-30,-20,
                        -10,-20,-20,-20,-20,-20,-20,-10,
                        20, 20,  0,  0,  0,  0, 20, 20,
                        20, 30, 10,  0,  0, 10, 30, 20
                },
                //KING ENDGAME
                {
                        -50,-40,-30,-20,-20,-30,-40,-50,
                        -30,-20,-10,  0,  0,-10,-20,-30,
                        -30,-10, 20, 30, 30, 20,-10,-30,
                        -30,-10, 30, 40, 40, 30,-10,-30,
                        -30,-10, 30, 40, 40, 30,-10,-30,
                        -30,-10, 20, 30, 30, 20,-10,-30,
                        -30,-30,  0,  0,  0,  0,-30,-30,
                        -50,-30,-30,-30,-30,-30,-30,-50
                }
        };

        enum Direction {
            North,
            NorthEast,
            East,
            SouthEast,
            South,
            SouthWest,
            West,
            NorthWest
        };

        extern uint64_t AttackTables[64][8];

        void initializeAttackTables();
    }
}
#endif
